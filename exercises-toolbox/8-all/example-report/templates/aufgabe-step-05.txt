# Realistisches-Beispiel-Protokoll

Einleitung:
Um dieser Aufgabe sinnvoll folgen zu können, sollte diese von Anfang an bearbeitet werden. Folge den
Anweisungen in den 'aufgabe.txt' Dateien in den Unterordnern des Ordners 'example-report'.

Aufgabe:
Mit den Informationen zu uncertainties kannst du jetzt den Umgang mit Messunsicherheiten
in die Auswertung aufnehmen. Die Messdaten im Ordner data haben jetzt
zusätzliche Spalten mit den jeweiligen Unsicherheiten.

1. Kopiere diese neuen Messwertdateien in deinen eigenen Ordner data, um die Messwerte
   mit Unsicherheiten verwenden zu können. Die alten Dateien kannst du überschreiben oder vorher löschen.

2. Importiere uncertainties und uncertainties.unumpy in deiner auswertung.py.

3. Ergänze das Einlesen der Messdaten um die zusätzlichen Spalten mit Unsicherheiten.
   Eine Benennung der Form l_unc für "Unsicherheit des Messwerts l" ist hier sinnvoll.

4. Die eingelesenen Messwerte und Unsicherheiten müssen jetzt zu unsicherheitsbehafteten
   Messwerten zusammengefügt werden. Nutze dafür ufloat (aus uncertainties) für einzelne Werte
   und uarray (aus uncertainties.unumpy) für Messreihen.

5. In den Fit-Funktionen musst du von allen Konstanten die Unsicherheiten entfernen,
   die dafür nötige Funktion heißt nominal_values und es bietet sich an, diese in
   abgekürzter Form zu importieren (genauso wie die Funktion std_devs):

   from uncertainties.unumpy import (nominal_values as noms, std_devs as stds)

   So kannst du die Funktion noms() verwenden, um die nominalen Werte benutzen zu können.

6. curve_fit kann mit Unsicherheiten nicht direkt umgehen, die unabhängige Variable
   darf keine Unsicherheiten haben und der Wert bzw. die Unsicherheit
   der abhängigen Variable müssen getrennt übergeben werden.

7. matplotlib kann auch nicht mit den Unsicherheiten umgehen:
   Verwende statt ax.plot die Funktion ax.errorbar, um die Messwerte mit ihren
   Unsicherheiten darzustellen.
